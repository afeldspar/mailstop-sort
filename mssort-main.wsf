<job id="MailstopSort">
  
  '$$$ Functions
  ' This is where we define functions which will be used later in the script.
  <script language="VBScript" src="fileRoleAssign.vbs"/>

  
  
  
  
  
  
  <!--
  '$$$ Functions to develop later
  ' These functions are not needed at this stage of development, but we know we will need them later.
  ' Right now they are commented out.
  ' <script language="JScript" src="isDataLine.js"/>
  -->
  
  
  
  
  
  
  
  
  
  
  
  ' Here we attempt to read the input files.
  '
  ' We use the fileRoleAssign function to interact with the user, and have
  ' the user tell us which file(s) contain our user data, which has the formatting
  ' instructions, and which has exception data. 
  '
  ' Later, we will write code to check whether the files we receive actually
  ' match what we're ready to accept and parse correctly.
  
  
  <script language="VBScript">
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    Const ForReading = 1, ForWriting = 2
    
    Set objArgs = WScript.Arguments
    fileRoleAssign(objArgs)
    
    
    
    
  
  
  
    
    Dim objInputFile
    Set objInputFile = objFSO.OpenTextFile(objArgs(0), ForReading)
    
    ' n = 0
    ' Do Until objInputFile.AtEndOfStream
    '   thisLine = objInputFile.ReadLine
    '   If n < 10 Then
    '     WScript.Echo thisLine
    '   End If
    '   n = n + 1
    ' Loop
    
    objInputFile.Close
  </script>
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  ' If we don't have the correct files of the correct type,
  ' or if they can't be read, we alert the user and abort.
  ' We use the VBScript command "WScript.Quit" to abort.
  <script language="VBScript">
    If objArgs.Count <> 2 Then
      WScript.Echo "This script is designed to operate on one data file and one format file.  Please drop both files on the script icon."
      WScript.Quit
    End If
  </script>
  
  ' By this point we must identify which is the format file and which is the data file.
  
  ' Here we read in the format file.
  ' We can probably represent it as an array.
  ' The elements of the array must include:
  '   * Literal elements, allowing headers like "This is Chris's section of the list";
  '   * Interest keys, specifying a subset of entries to be printed at that point in the output;
  '   * Sorting instructions, telling us how to sort and format the entries collated by the interest key.
  ' Is there anything else?
  
  ' We will start with two "hard-wired" output formats:
  '
  ' * "Cubby" - Each mailstop is printed as a header, followed by one spacer line,
  '             followed by each person at that mailstop, formatted as "Last (tab) First" on a single line,
  '             followed by two spaces before the next mailstop.
  '
  ' * "Directory" - Every person, rendered as "Last, First (tab) Mailstop" on a single line.
  
  
</job>
